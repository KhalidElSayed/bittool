package com.getlua.lua.talk;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.CursorLoader;
import android.support.v4.content.Loader;
import android.support.v4.widget.CursorAdapter;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.inputmethod.InputMethodManager;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;

import com.actionbarsherlock.app.SherlockListFragment;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.actionbarsherlock.view.MenuItem.OnActionExpandListener;
import com.actionbarsherlock.widget.SearchView;
import com.actionbarsherlock.widget.SearchView.OnCloseListener;
import com.actionbarsherlock.widget.SearchView.OnQueryTextListener;
import com.getlua.lua.Constants;
import com.getlua.lua.ProjectSession;
import com.getlua.lua.R;
import com.getlua.lua.events.ApiEvent;
import com.getlua.lua.files.FilesDB;
import com.getlua.lua.model.BooleanSqliteColumn;
import com.getlua.lua.views.TimeView;

import de.greenrobot.event.EventBus;

/**
 * Primary fragment in Talk tab that shows conversation list
 */
public class ConversationListFragment extends SherlockListFragment implements LoaderManager.LoaderCallbacks<Cursor>,
		OnClickListener, OnScrollListener, OnQueryTextListener, OnCloseListener, OnActionExpandListener {

	public static final String TAG = ConversationListFragment.class.getSimpleName();

	private static final String KEY_SESSION = Constants.BUNDLE_KEY_ROOT + "session";
	private static final String KEY_SAVED_SEARCH = Constants.BUNDLE_KEY_ROOT + "saved_search";

	private static final int LOADER_ID_CONVERSATIONS = 117;
	private static final int LOADER_ID_BLASTS = 217;

	private ConversationAdapter mConversationsAdapter;

	private HideConversationListener mHideConvoListener;

	private View mFooter;
	
	private String mSearch;

	public interface HideConversationListener {
		public void hideConversation(String title, long projectId, long conversationId);

		public void showConversation(ProjectSession session, long conversationId);
	}

	public static ConversationListFragment newInstance(ProjectSession session) {
		ConversationListFragment f = new ConversationListFragment();

		Bundle args = new Bundle();
		args.putParcelable(KEY_SESSION, session);
		f.setArguments(args);

		return f;
	}

	private ProjectSession getSession() {
		ProjectSession session = getArguments().getParcelable(KEY_SESSION);
		return session;
	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setHasOptionsMenu(true);
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		super.onCreateView(inflater, container, savedInstanceState);
		View v = inflater.inflate(R.layout.conversation_fragment, container, false);
		mFooter = inflater.inflate(R.layout.row_loading, null);
		View blast = v.findViewById(R.id.blast_include);
		blast.setOnClickListener(this);

		return v;
	}

	@Override
	public void onAttach(Activity activity) {
		super.onAttach(activity);
		try {
			mHideConvoListener = (HideConversationListener) activity;
		} catch (ClassCastException e) {
			throw new ClassCastException(activity.toString() + " must implement "
					+ HideConversationListener.class.getSimpleName());
		}
	}

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);
		if (savedInstanceState != null) {
			if (savedInstanceState.containsKey(KEY_SAVED_SEARCH)) {
				mSearch = savedInstanceState.getString(KEY_SAVED_SEARCH);
			}
		}
		getListView().addFooterView(mFooter, null, true);
		getListView().setOnItemLongClickListener(this);
		mConversationsAdapter = new ConversationAdapter(mHideConvoListener, getSherlockActivity(), null,
				CursorAdapter.FLAG_REGISTER_CONTENT_OBSERVER);
		setListAdapter(mConversationsAdapter);
		getActivity().getSupportLoaderManager().initLoader(LOADER_ID_CONVERSATIONS, null, this);
		getActivity().getSupportLoaderManager().initLoader(LOADER_ID_BLASTS, null, this);
	}
	
	@Override
	public void onSaveInstanceState(Bundle outState) {
		if (mSearch != null) {
			outState.putString(KEY_SAVED_SEARCH, mSearch);
		}
		super.onSaveInstanceState(outState);
	}

	@Override
	public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
		inflater.inflate(R.menu.main_activity_menu, menu);
		inflater.inflate(R.menu.conversations_fragment_menu, menu);
		super.onCreateOptionsMenu(menu, inflater);
	}
	
	@Override
	public void onPrepareOptionsMenu(Menu menu) {
		super.onPrepareOptionsMenu(menu);
		if (mSearch != null) {
			String search = mSearch;
			SearchView searchView = new SearchView(getSherlockActivity().getSupportActionBar().getThemedContext());
	        searchView.setOnQueryTextListener(this);
	        searchView.setOnCloseListener(this);
	        
	        MenuItem item = menu.findItem(R.id.menu_search);
			item.setActionView(searchView);
			item.setOnActionExpandListener(this);
			item.setShowAsActionFlags(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW);
			
			item.expandActionView();
			searchView.setQuery(search, true);
		}
	}
	
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.menu_search:
	        SearchView searchView = new SearchView(getSherlockActivity().getSupportActionBar().getThemedContext());
	        searchView.setQueryHint(getResources().getString(R.string.search));
	        searchView.setOnQueryTextListener(this);
	        searchView.setOnCloseListener(this);
	        
			item.setActionView(searchView);
			item.setOnActionExpandListener(this);
			item.setShowAsActionFlags(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW);
			break;
		}
		return super.onOptionsItemSelected(item);
	}
	
	@Override
	public boolean onQueryTextSubmit(String query) {
		getActivity().getSupportLoaderManager().restartLoader(LOADER_ID_CONVERSATIONS, null, this);
		return false;
	}

	@Override
	public boolean onQueryTextChange(String newText) {
		if(newText.length() > 0) {
			mSearch = newText;
		} else {
			mSearch = null;
		}
		getActivity().getSupportLoaderManager().restartLoader(LOADER_ID_CONVERSATIONS, null, this);
		return true;
	}
	
	@Override
	public boolean onClose() {
		mSearch = null;
		getActivity().getSupportLoaderManager().restartLoader(LOADER_ID_CONVERSATIONS, null, this);
		return false;
	}

	@Override
	public boolean onMenuItemActionExpand(MenuItem item) {
		getSherlockActivity().getSupportActionBar().setIcon(R.drawable.home);
		mSearch = null;
		getActivity().getSupportLoaderManager().restartLoader(LOADER_ID_CONVERSATIONS, null, this);
		return true;
	}

	@Override
	public boolean onMenuItemActionCollapse(MenuItem item) {
		mSearch = null;
		InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
		imm.hideSoftInputFromWindow(getView().getWindowToken(), InputMethodManager.HIDE_IMPLICIT_ONLY);
		getActivity().getSupportLoaderManager().restartLoader(LOADER_ID_CONVERSATIONS, null, this);
		return true;
	}

	@Override
	public void onResume() {
		super.onResume();
		EventBus.getDefault().register(this);
		getActivity().getSupportLoaderManager().restartLoader(LOADER_ID_CONVERSATIONS, null, this);
	}

	@Override
	public void onPause() {
		super.onPause();
		EventBus.getDefault().unregister(this);
	}

	@Override
	public void onDestroyView() {
		super.onDestroyView();
		getActivity().getSupportLoaderManager().destroyLoader(LOADER_ID_CONVERSATIONS);
		setListAdapter(null);
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
	}

	@Override
	public Loader<Cursor> onCreateLoader(int id, Bundle arg1) {
		switch (id) {
		case LOADER_ID_CONVERSATIONS:
			return TalkDB.Conversation.getLoader(getActivity(), getSession().getProjectId(), mSearch);
		case LOADER_ID_BLASTS:
			final String selectionBlasts = TalkDB.Conversation.COLUMN_NAME_PROJECT_ID + "=? AND "
					+ TalkDB.Conversation.COLUMN_NAME_BLAST + "=?";
			final String[] selectionBlastsArgs = { Long.toString(getSession().getProjectId()), "true" };
			return new CursorLoader(getActivity(), TalkDB.Conversation.CONTENT_URI,
					TalkDB.Conversation.FULL_PROJECTION, selectionBlasts, selectionBlastsArgs,
					TalkDB.Conversation.DEFAULT_SORT_ORDER);
		default:
			return null;
		}
	}

	@Override
	public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
		switch (loader.getId()) {
		case LOADER_ID_CONVERSATIONS:
			mConversationsAdapter.swapCursor(data);
			mConversationsAdapter.notifyDataSetChanged();
			break;
		case LOADER_ID_BLASTS:
			View blast = getView().findViewById(R.id.blast_include);
			if (data != null && data.moveToFirst()) {
				((TextView) blast.findViewById(R.id.name)).setText(data.getString(data
						.getColumnIndex(TalkDB.Conversation.COLUMN_NAME_NAME)));
				((TextView) blast.findViewById(R.id.message)).setText(data.getString(data
						.getColumnIndex(TalkDB.Conversation.COLUMN_NAME_LAST_MSG_BODY)));
				((TimeView) blast.findViewById(R.id.time)).setDate(data.getString(data
						.getColumnIndex(TalkDB.Conversation.COLUMN_NAME_UPDATED_AT)));
				blast.setVisibility(View.VISIBLE);
			} else {
				blast.setVisibility(View.GONE);
			}
			break;
		}
	}

	@Override
	public void onLoaderReset(Loader<Cursor> loader) {
		switch (loader.getId()) {
		case LOADER_ID_CONVERSATIONS:
			mConversationsAdapter.swapCursor(null);
			break;
		}
	}

	@Override
	public void onListItemClick(ListView l, View v, int position, long id) {
		if (position == getListView().getCount() - 1) {
			getActivity().getSupportLoaderManager().restartLoader(LOADER_ID_CONVERSATIONS, null, this);
			getActivity().getSupportLoaderManager().restartLoader(LOADER_ID_BLASTS, null, this);
		} else {
			Cursor c = (Cursor) l.getAdapter().getItem(position);
			long conversationId = c.getLong(c.getColumnIndexOrThrow(TalkDB.Conversation.COLUMN_NAME_CONVERSATION_ID));
			Intent intent = ConversationDetailActivity.getMessagesListIntent(getActivity(), getSession(),
					conversationId);
			startActivity(intent);
		}
	}

	@Override
	public boolean onItemLongClick(AdapterView<?> parent, View v, int position, long id) {
//		if (position == getListView().getCount() - 1) {
//			getActivity().getSupportLoaderManager().restartLoader(LOADER_ID_CONVERSATIONS, null, this);
//			getActivity().getSupportLoaderManager().restartLoader(LOADER_ID_BLASTS, null, this);
//		} else {
//			Cursor c = (Cursor) parent.getAdapter().getItem(position);
//			long projectId = c.getLong(c.getColumnIndexOrThrow(TalkDB.Conversation.COLUMN_NAME_PROJECT_ID));
//			long conversationId = c.getLong(c.getColumnIndexOrThrow(TalkDB.Conversation.COLUMN_NAME_CONVERSATION_ID));
//			String title = c.getString(c.getColumnIndexOrThrow(TalkDB.Conversation.COLUMN_NAME_NAME));
//			if (BooleanSqliteColumn
//					.isFalse(c.getString(c.getColumnIndexOrThrow(TalkDB.Conversation.COLUMN_NAME_BLAST)))) {
//				mHideConvoListener.hideConversation(title, projectId, conversationId);
//			}
//		}
		return true;
	}

	@Override
	public void onClick(View v) {
		int id = v.getId();
		switch (id) {
		case R.id.blast_include:
			Intent intent = ConversationDetailActivity.getBlastListIntent(getActivity(), getSession());
			startActivity(intent);
			break;
		}
	}

	@Override
	public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
	}

	@Override
	public void onScrollStateChanged(AbsListView view, int scrollState) {
		if (scrollState == SCROLL_STATE_IDLE) {
			if (getListView().getLastVisiblePosition() == getListView().getCount() - 1) {
				getActivity().getSupportLoaderManager().restartLoader(LOADER_ID_CONVERSATIONS, null, this);
				getActivity().getSupportLoaderManager().restartLoader(LOADER_ID_BLASTS, null, this);
			}
		}
	}

	public void onEventMainThread(ApiEvent event) {
		switch (event.getType()) {
		case ALL:
		case CONVERSATIONS:
			View blast = getView().findViewById(R.id.blast_include);
			switch (event.getState()) {
			case COMMUNICATING:
			case PROCESSING:
				mFooter.findViewById(R.id.loader).setVisibility(View.VISIBLE);
				mFooter.findViewById(R.id.logo).setVisibility(View.GONE);
				((ImageView) blast.findViewById(R.id.avatar)).setVisibility(View.INVISIBLE);
				((ProgressBar) blast.findViewById(R.id.progress_spinner)).setVisibility(View.VISIBLE);
				break;
			case IDLE:
				mFooter.findViewById(R.id.loader).setVisibility(View.GONE);
				mFooter.findViewById(R.id.logo).setVisibility(View.VISIBLE);
				((ImageView) blast.findViewById(R.id.avatar)).setVisibility(View.VISIBLE);
				((ProgressBar) blast.findViewById(R.id.progress_spinner)).setVisibility(View.INVISIBLE);
				break;
			case UNKNOWN:
			default:
			}
			break;
		default:
			break;
		}
	}
}
