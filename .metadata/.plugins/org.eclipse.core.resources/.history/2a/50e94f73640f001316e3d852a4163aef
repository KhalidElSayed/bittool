package com.getlua.lua.files;

import android.app.Activity;
import android.content.Context;
import android.database.Cursor;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.Loader;
import android.support.v4.widget.CursorAdapter;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.inputmethod.InputMethodManager;
import android.webkit.MimeTypeMap;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemLongClickListener;
import android.widget.ListView;
import android.widget.Toast;

import com.actionbarsherlock.app.SherlockListFragment;
import com.actionbarsherlock.view.Menu;
import com.actionbarsherlock.view.MenuInflater;
import com.actionbarsherlock.view.MenuItem;
import com.actionbarsherlock.view.MenuItem.OnActionExpandListener;
import com.actionbarsherlock.widget.SearchView;
import com.actionbarsherlock.widget.SearchView.OnCloseListener;
import com.actionbarsherlock.widget.SearchView.OnQueryTextListener;
import com.getlua.lua.Constants;
import com.getlua.lua.ProjectSession;
import com.getlua.lua.R;
import com.getlua.lua.events.ApiEvent;

import de.greenrobot.event.EventBus;

public class FilesListFragment extends SherlockListFragment implements LoaderManager.LoaderCallbacks<Cursor>,
		OnItemLongClickListener, OnScrollListener, OnQueryTextListener, OnCloseListener, OnActionExpandListener {

	private static final String TAG = FilesListFragment.class.getSimpleName();

	public static final String KEY_SESSION = Constants.BUNDLE_KEY_ROOT + "project_id";
	public static final String KEY_UPLOAD_ID = Constants.BUNDLE_KEY_ROOT + "upload_id";
	public static final String KEY_EXTENSION = Constants.BUNDLE_KEY_ROOT + "extension";
	public static final String KEY_CONTENT_TYPE = Constants.BUNDLE_KEY_ROOT + "content_type";
	public static final String KEY_SAVED_POSITION = Constants.BUNDLE_KEY_ROOT + "saved_position";
	public static final String KEY_PAGE = Constants.BUNDLE_KEY_ROOT + "page";
	private static final String KEY_SAVED_SEARCH = Constants.BUNDLE_KEY_ROOT + "saved_search";

	private static final int LOADER_ID_FILES = 106;

	private FilesListCursorAdapter mAdapter;
	private IUploadController mController;

	private View mFooter;

	private int mPage = 1;

	private String mSearch;

	/** Hack for orientation change */
	/** Saves position in the list. */
	private int listPosition = -1;
	/** Position at the top of the view. */
	private int viewTop = 0;
	/** Used to keep position at the footer when new data is being added to the list.
 	 * When scroll state is changed does not move to saved list position. */
	private boolean loadSaved = false;

	public static FilesListFragment newInstance(ProjectSession session, int filesListPosition) {
		FilesListFragment f = new FilesListFragment();

		Bundle args = new Bundle();
		args.putParcelable(KEY_SESSION, session);
		f.setArguments(args);

		return f;
	}

	public interface IUploadController {
		/**
		 * 
		 * @param projectId
		 * @param uploadId
		 * @param filename
		 * @param localUri
		 *            - may be null
		 * @param contentType
		 * @param filesListPosition
		 */
		public void viewUpload(ProjectSession session, long uploadId, String filename, String localUri);

		public void addUpload(ProjectSession session);

		public void showUploadInfo(ProjectSession session, long uploadId, int filesListPosition);
		
        public void archiveUpload(String filename, long projectId, long conversationId);
	}

	private ProjectSession getSession() {
		ProjectSession session = getArguments().getParcelable(KEY_SESSION);
		return session;
	}

	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setHasOptionsMenu(true);

		if (savedInstanceState != null) {
			loadSaved = true;
			mPage = savedInstanceState.getInt(KEY_PAGE);
		}
	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		super.onCreateView(inflater, container, savedInstanceState);
		mFooter = inflater.inflate(R.layout.row_loading, null);
		return inflater.inflate(R.layout.fragment_files_list, container, false);
	}

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);
		if (savedInstanceState != null) {
			if (savedInstanceState.containsKey(KEY_SAVED_SEARCH)) {
				mSearch = savedInstanceState.getString(KEY_SAVED_SEARCH);
			}
		}
		getListView().addFooterView(mFooter, null, true);
		getListView().setOnItemLongClickListener(this);
		getListView().setOnScrollListener(this);
		mAdapter = new FilesListCursorAdapter(mController, getSession(), getActivity(), null, CursorAdapter.FLAG_REGISTER_CONTENT_OBSERVER);
		setListAdapter(mAdapter);

		getActivity().getSupportLoaderManager().initLoader(LOADER_ID_FILES, null, this);
	}

	@Override
	public void onAttach(Activity activity) {
		super.onAttach(activity);
		try {
			mController = (IUploadController) activity;
		} catch (ClassCastException e) {
			throw new ClassCastException(activity.toString() + " must implement "
					+ IUploadController.class.getSimpleName());
		}
	}

	@Override
	public void onSaveInstanceState(Bundle outState) {
		outState.putInt(KEY_PAGE, mPage);
		if (mSearch != null) {
			outState.putString(KEY_SAVED_SEARCH, mSearch);
		}
		super.onSaveInstanceState(outState);
	}

	@Override
	public void onResume() {
		super.onResume();
		EventBus.getDefault().register(this);
		getActivity().getSupportLoaderManager().restartLoader(LOADER_ID_FILES, null, this);
	}

	@Override
	public void onPause() {
		loadSaved = true;
		listPosition = getListView().getFirstVisiblePosition();
		View v = getListView().getChildAt(0);
		viewTop = (v == null) ? 0 : v.getTop();

		super.onPause();
		EventBus.getDefault().unregister(this);
	}

	@Override
	public void onDestroyView() {
		super.onDestroyView();
		getActivity().getSupportLoaderManager().destroyLoader(LOADER_ID_FILES);
		setListAdapter(null);
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
	}

	@Override
	public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
		inflater.inflate(R.menu.main_activity_menu, menu);
		inflater.inflate(R.menu.file_list_fragment_menu, menu);
		super.onCreateOptionsMenu(menu, inflater);
	}
	
	@Override
	public void onPrepareOptionsMenu(Menu menu) {
		super.onPrepareOptionsMenu(menu);
		if (mSearch != null) {
			String search = mSearch;
			SearchView searchView = new SearchView(getSherlockActivity().getSupportActionBar().getThemedContext());
	        searchView.setOnQueryTextListener(this);
	        searchView.setOnCloseListener(this);
	        
	        MenuItem item = menu.findItem(R.id.menu_search);
			item.setActionView(searchView);
			item.setOnActionExpandListener(this);
			item.setShowAsActionFlags(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW);
			
			item.expandActionView();
			searchView.setQuery(search, true);
		}
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		switch (item.getItemId()) {
		case R.id.menu_addfile:
			mController.addUpload(getSession());
			break;
		case R.id.menu_search:
			SearchView searchView = new SearchView(getSherlockActivity().getSupportActionBar().getThemedContext());
			searchView.setQueryHint(getResources().getString(R.string.search));
			searchView.setOnQueryTextListener(this);
			searchView.setOnCloseListener(this);

			item.setActionView(searchView);
			item.setOnActionExpandListener(this);
			item.setShowAsActionFlags(MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW);
			break;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	public void onListItemClick(ListView parent, View v, int position, long id) {
		if (position == getListView().getCount() - 1) {
			getActivity().getSupportLoaderManager().restartLoader(LOADER_ID_FILES, null, this);
		} else {
			Cursor c = (Cursor) mAdapter.getItem(position);
			String state = c.getString(FilesDB.Upload.IDX_LIST_STATE);
			if (TextUtils.equals(state, FilesDB.Upload.STATE_UPLOADING)
					|| TextUtils.equals(state, FilesDB.Upload.STATE_FAILED)) {
				// don't open file info screen if the state is uploading,
				// processing, or failed
				return;
			} else {
				long uploadId = c.getLong(FilesDB.Upload.IDX_LIST_ID);
				mController.showUploadInfo(getSession(), uploadId, getListView().getFirstVisiblePosition());
			}
		}
	}

	@Override
	public boolean onItemLongClick(AdapterView<?> parent, View v, int position, long id) {
//		if (position == getListView().getCount() - 1) {
//			getActivity().getSupportLoaderManager().restartLoader(LOADER_ID_FILES, null, this);
//		} else {
//			Cursor c = (Cursor) parent.getAdapter().getItem(position);
//			String state = c.getString(FilesDB.Upload.IDX_LIST_STATE);
//			if (state.equals(FilesDB.Upload.STATE_UPLOADING)) {
//				// don't do anything for uploading or processing
//				return true;
//			} else if (TextUtils.equals(state, FilesDB.Upload.STATE_FAILED)) {
//				// allow deleting a failed file upload with a long click
//				long projectId = c.getLong(FilesDB.Upload.IDX_LIST_PROJECT_ID);
//				long uploadId = c.getLong(FilesDB.Upload.IDX_LIST_ID);
//				String[] selectionArgs = { Long.toString(projectId), Long.toString(uploadId) };
//				getActivity().getContentResolver().delete(FilesDB.Upload.CONTENT_URI, FilesDB.Upload.SELECTION_UPLOAD,
//						selectionArgs);
//				return true;
//			} else {
//				// download and open the file for all other states
//				Uri.Builder builder = FilesDB.Upload.CONTENT_ID_URI_BASE.buildUpon();
//				builder.appendPath(Long.toString(id));
//				long uploadId = c.getLong(FilesDB.Upload.IDX_LIST_ID);
//				String filename = c.getString(FilesDB.Upload.IDX_LIST_FILENAME);
//				String localUri = c.getString(FilesDB.Upload.IDX_LIST_LOCAL_FILE_URI);
//				String extension = c.getString(FilesDB.Upload.IDX_LIST_EXTENSION);
//				String mimeType = c.getString(FilesDB.Upload.IDX_LIST_CONTENT_TYPE);
//				if (extension.length() == 0) {
//					extension = MimeTypeMap.getSingleton().getExtensionFromMimeType(mimeType);
//				}
//				mController.viewUpload(getSession(), uploadId, filename, localUri);
//			}
//		}
		return true;
	}

	@Override
	public Loader<Cursor> onCreateLoader(int id, Bundle args) {
		return FilesDB.Upload.getLoader(getActivity(), getSession().getProjectId(), mPage, mSearch);
	}

	@Override
	public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
		// Update the project list with data retrieved from Projects Content
		// Provider
		switch (loader.getId()) {
		case LOADER_ID_FILES:
			mAdapter.swapCursor(data);
			// Set the saved position on orientation change
			if (loadSaved && listPosition != -1) {
				getListView().setSelectionFromTop(listPosition, viewTop);
			}
			break;
		}
	}

	@Override
	public void onLoaderReset(Loader<Cursor> loader) {
		mAdapter.swapCursor(null);
	}

	@Override
	public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
	}

	@Override
	public void onScrollStateChanged(AbsListView view, int scrollState) {
		loadSaved = false;
		if (scrollState == SCROLL_STATE_IDLE) {
			if (getListView().getLastVisiblePosition() == getListView().getCount() - 1) {
				/*
				 * FIXME: Figure out faster way to get PageSize, hardcoded for
				 * now.
				 */
				mPage = getListView().getLastVisiblePosition() / 50 + 1;
				getActivity().getSupportLoaderManager().restartLoader(LOADER_ID_FILES, null, this);
			}
		}
	}

	@Override
	public boolean onQueryTextSubmit(String query) {
		getActivity().getSupportLoaderManager().restartLoader(LOADER_ID_FILES, null, this);
		return false;
	}

	@Override
	public boolean onQueryTextChange(String newText) {
		if (newText.length() > 1) {
			mSearch = newText;
		} else {
			mSearch = null;
		}
		getActivity().getSupportLoaderManager().restartLoader(LOADER_ID_FILES, null, this);
		return true;
	}

	@Override
	public boolean onClose() {
		mSearch = null;
		getActivity().getSupportLoaderManager().restartLoader(LOADER_ID_FILES, null, this);
		return false;
	}

	@Override
	public boolean onMenuItemActionExpand(MenuItem item) {
		getSherlockActivity().getSupportActionBar().setIcon(R.drawable.home);
		mSearch = null;
		getActivity().getSupportLoaderManager().restartLoader(LOADER_ID_FILES, null, this);
		return true;
	}

	@Override
	public boolean onMenuItemActionCollapse(MenuItem item) {
		mSearch = null;
		InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
		imm.hideSoftInputFromWindow(getView().getWindowToken(), InputMethodManager.HIDE_IMPLICIT_ONLY);
		getActivity().getSupportLoaderManager().restartLoader(LOADER_ID_FILES, null, this);
		return true;
	}

	public void onEventMainThread(ApiEvent event) {
		switch (event.getType()) {
		case ALL:
		case FILES:
			switch (event.getState()) {
			case COMMUNICATING:
			case PROCESSING:
				mFooter.findViewById(R.id.loader).setVisibility(View.VISIBLE);
				mFooter.findViewById(R.id.logo).setVisibility(View.GONE);
				break;
			case IDLE:
				mFooter.findViewById(R.id.loader).setVisibility(View.GONE);
				mFooter.findViewById(R.id.logo).setVisibility(View.VISIBLE);
				break;
			case UNKNOWN:
			default:

			}
			break;
		case UNKNOWN:
		default:
		}
	}
}
